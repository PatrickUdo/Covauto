@page "/dashboard"
@using System.Net.Http.Json
@using Covauto.Domain.Entities
@using Covauto.Shared.DTOs
@inject HttpClient Http
@inject NavigationManager Nav
@inject Covauto.Blazor.Services.AuthService AuthService

<ErrorBoundary>
	<ChildContent>
		<div class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-4">
			<div class="max-w-6xl mx-auto">
				<div class="text-center mb-8">
					<h1 class="text-4xl font-bold text-slate-800 mb-2">Dashboard</h1>
					<p class="text-slate-600 text-lg">Beheer uw auto reserveringen</p>
				</div>

				@if (IsLoading)
				{
					<div class="flex items-center justify-center space-x-3 text-blue-600 py-20">
						<div class="animate-spin rounded-full h-10 w-10 border-t-2 border-b-2 border-blue-600"></div>
						<span class="text-xl">Reserveringen laden...</span>
					</div>
				}
				else if (!string.IsNullOrEmpty(Message))
				{
					<div class="bg-red-50 border-l-4 border-red-400 text-red-700 p-6 rounded-lg mb-8 mx-auto max-w-4xl shadow-sm">
						<div class="flex items-center">
							<i class="fas fa-exclamation-triangle mr-3 text-lg"></i>
							<p class="font-medium">@Message</p>
						</div>
					</div>
				}
				else if (!string.IsNullOrEmpty(Username))
				{
					<div class="bg-white rounded-2xl shadow-lg p-6 mb-8">
						<div class="flex items-center justify-between">
							<div>
								<h2 class="text-xl font-bold text-slate-800">Welkom, @Username!</h2>
								<p class="text-slate-600">Bekijk en beheer uw reserveringen</p>
							</div>
							<div class="text-right">
								<div class="text-2xl font-bold text-blue-600">@UserReservations.Count</div>
								<div class="text-sm text-slate-600">Actieve reserveringen</div>
							</div>
						</div>
					</div>

					@if (UserReservations.Any())
					{
						<div class="space-y-6">
							@foreach (var reservation in UserReservations.OrderBy(r => r.StartDatum))
							{
								var isUpcoming = reservation.StartDatum > DateTime.Now;
								var isActive = reservation.StartDatum <= DateTime.Now && reservation.EindDatum > DateTime.Now;
								var isPast = reservation.EindDatum <= DateTime.Now;
								var canComplete = isActive || (isPast && reservation.EindDatum >= DateTime.Now.AddHours(-2));
								var canCancel = isUpcoming;

								<div class="bg-white rounded-2xl shadow-lg overflow-hidden">
									<div class="p-6">
										<div class="flex flex-col lg:flex-row lg:items-center justify-between">
											<div class="flex-1 mb-4 lg:mb-0">
												<div class="flex items-center gap-3 mb-3">
													<div class="text-3xl">🚗</div>
													<div>
														<h3 class="text-xl font-bold text-slate-800">@reservation.Auto?.Naam</h3>
														<p class="text-slate-600">@reservation.Auto?.Kenteken</p>
													</div>
													<div class="ml-4">
														@if (isUpcoming)
														{
															<span class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-semibold">
																Gepland
															</span>
														}
														else if (isActive)
														{
															<span class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-semibold">
																Actief
															</span>
														}
														else if (isPast && canComplete)
														{
															<span class="bg-orange-100 text-orange-800 px-3 py-1 rounded-full text-sm font-semibold">
																Te voltooien
															</span>
														}
														else
														{
															<span class="bg-gray-100 text-gray-800 px-3 py-1 rounded-full text-sm font-semibold">
																Voltooid
															</span>
														}
													</div>
												</div>

												<div class="grid grid-cols-1 md:grid-cols-3 gap-4 bg-slate-50 rounded-xl p-4">
													<div>
														<label class="block text-sm font-semibold text-slate-700 mb-1">Start</label>
														<div class="text-slate-800 font-bold">@reservation.StartDatum.ToString("dd/MM/yyyy HH:mm")</div>
													</div>
													<div>
														<label class="block text-sm font-semibold text-slate-700 mb-1">Eind</label>
														<div class="text-slate-800 font-bold">@reservation.EindDatum.ToString("dd/MM/yyyy HH:mm")</div>
													</div>
													<div>
														<label class="block text-sm font-semibold text-slate-700 mb-1">Duur</label>
														<div class="text-slate-800 font-bold">@GetDuration(reservation.StartDatum, reservation.EindDatum)</div>
													</div>
												</div>
											</div>

											<div class="flex flex-col sm:flex-row gap-3 lg:ml-6">
												@if (canCancel)
												{
													<button class="bg-red-100 text-red-700 py-2 px-4 rounded-xl font-semibold hover:bg-red-200 transition-colors duration-200 flex items-center justify-center"
															@onclick="() => CancelReservation(reservation.Id)">
														<i class="fas fa-times mr-2"></i>
														Annuleren
													</button>
												}
												@if (canComplete)
												{
													<button class="bg-green-100 text-green-700 py-2 px-4 rounded-xl font-semibold hover:bg-green-200 transition-colors duration-200 flex items-center justify-center"
															@onclick="() => ShowCompleteModal(reservation)">
														<i class="fas fa-check mr-2"></i>
														Voltooien
													</button>
												}
											</div>
										</div>
									</div>
								</div>
							}
						</div>
					}
					else
					{
						<div class="bg-white rounded-2xl shadow-lg p-12 text-center">
							<div class="text-6xl mb-6">📅</div>
							<h3 class="text-2xl font-bold text-slate-800 mb-4">Geen Reserveringen</h3>
							<p class="text-slate-600 text-lg mb-6">U heeft momenteel geen actieve reserveringen</p>
							<button class="bg-gradient-to-r from-blue-500 to-blue-600 text-white py-3 px-6 rounded-xl font-semibold hover:from-blue-600 hover:to-blue-700 transition-all duration-200 shadow-lg"
									@onclick="NavigateToReservation">
								<i class="fas fa-plus mr-2"></i>
								Nieuwe Reservering
							</button>
						</div>
					}

					@if (!string.IsNullOrEmpty(SuccessMessage))
					{
						<div class="mt-6 bg-green-50 border-l-4 border-green-400 text-green-700 p-6 rounded-lg shadow-sm">
							<div class="flex items-center">
								<i class="fas fa-check-circle mr-3 text-lg"></i>
								<p class="font-medium">@SuccessMessage</p>
							</div>
						</div>
					}
				}
			</div>
		</div>

		@if (ShowCompleteReservationModal && SelectedReservation != null)
		{
			<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
				<div class="bg-white rounded-2xl shadow-2xl max-w-md w-full">
					<div class="p-6">
						<div class="flex items-center gap-3 mb-4">
							<div class="text-2xl">🏁</div>
							<h3 class="text-xl font-bold text-slate-800">Reservering Voltooien</h3>
						</div>

						<div class="mb-4">
							<p class="text-slate-600 mb-2">
								<strong>Auto:</strong> @SelectedReservation.Auto?.Naam (@SelectedReservation.Auto?.Kenteken)
							</p>
							<p class="text-slate-600">
								<strong>Periode:</strong> @SelectedReservation.StartDatum.ToString("dd/MM HH:mm") - @SelectedReservation.EindDatum.ToString("dd/MM HH:mm")
							</p>
						</div>

						<div class="mb-6">
							<label class="block text-sm font-semibold text-slate-700 mb-2">
								Nieuwe Kilometerstand <span class="text-red-500">*</span>
							</label>
							<div class="relative">
								<input type="number"
									   class="w-full p-3 border-2 border-slate-200 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-green-500 transition-all duration-200"
									   placeholder="Voer nieuwe kilometerstand in"
									   min="@(SelectedReservation.Auto?.Kilometerstand ?? 0)"
									   @bind="NewKilometerstand" />
								<div class="absolute right-3 top-3 text-slate-400">
									<i class="fas fa-tachometer-alt"></i>
								</div>
							</div>
							@if (SelectedReservation.Auto?.Kilometerstand != null)
							{
								<p class="text-sm text-slate-500 mt-1">
									Huidige kilometerstand: @SelectedReservation.Auto.Kilometerstand km
								</p>
							}
							else
							{
								<p class="text-sm text-orange-600 mt-1">
									Auto gegevens worden geladen...
								</p>
							}
							@if (!string.IsNullOrEmpty(KilometerstandError))
							{
								<p class="text-sm text-red-600 mt-1">@KilometerstandError</p>
							}
						</div>

						<div class="flex gap-3">
							<button class="flex-1 bg-slate-100 text-slate-700 py-3 px-4 rounded-xl font-semibold hover:bg-slate-200 transition-colors duration-200"
									@onclick="CloseCompleteModal">
								Annuleren
							</button>
							<button class="flex-1 bg-gradient-to-r from-green-500 to-green-600 text-white py-3 px-4 rounded-xl font-semibold hover:from-green-600 hover:to-green-700 transition-all duration-200 shadow-lg"
									@onclick="CompleteReservation"
									disabled="@(NewKilometerstand <= 0 || NewKilometerstand < (SelectedReservation.Auto?.Kilometerstand ?? 0))">
								<i class="fas fa-check mr-2"></i>
								Voltooien
							</button>
						</div>
					</div>
				</div>
			</div>
		}
	</ChildContent>
	<ErrorContent>
		<div class="bg-red-50 border-l-4 border-red-400 text-red-700 p-6 rounded-lg max-w-4xl mx-auto shadow-sm">
			<div class="flex items-center">
				<i class="fas fa-exclamation-circle mr-3 text-lg"></i>
				<p class="font-medium">Er is een onverwachte fout opgetreden. Probeer de pagina te vernieuwen.</p>
			</div>
		</div>
	</ErrorContent>
</ErrorBoundary>

@code {
	private string Username { get; set; } = string.Empty;
	private string Message { get; set; } = string.Empty;
	private string SuccessMessage { get; set; } = string.Empty;
	private string KilometerstandError { get; set; } = string.Empty;
	private bool IsLoading { get; set; } = true;
	private List<LeenAutoReserveringDTO> UserReservations = new();
	private bool ShowCompleteReservationModal = false;
	private LeenAutoReserveringDTO? SelectedReservation = null;
	private int NewKilometerstand = 0;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var result = await AuthService.GetUserInfoAsync();
			if (result.Success)
			{
				Username = result.Username ?? string.Empty;
				if (string.IsNullOrEmpty(Username))
				{
					Message = result.Message ?? "Unknown error";
				}
				else
				{
					await LoadUserReservations();
				}
			}
			else
			{
				if ((result.Message?.Contains("401") ?? false) || (result.Message?.Contains("Unauthorized") ?? false))
				{
					Nav.NavigateTo("/login");
					return;
				}
				Message = result.Message ?? "Failed to get user info.";
			}
		}
		catch (Exception ex)
		{
			Message = $"An error occurred: {ex.Message}";
		}
		finally
		{
			IsLoading = false;
		}
	}

	private async Task LoadUserReservations()
	{
		try
		{
			var user = await AuthService.GetUserInfoAsync();
			if (!user.Success)
			{
				Nav.NavigateTo("/login");
				return;
			}

			var allReservations = await Http.GetFromJsonAsync<List<LeenAutoReserveringDTO>>("/api/LeenAutoReservering") ?? new();

			UserReservations = allReservations
				.Where(r => r.WerknemerId == user.UserId &&
									(r.RitVoltooid != true) &&
									r.EindDatum >= DateTime.Now.AddHours(-2))
				.OrderBy(r => r.StartDatum)
				.ToList();

			foreach (var reservation in UserReservations)
			{
				if (reservation.Auto == null && reservation.AutoId > 0)
				{
					try
					{
						reservation.Auto = await Http.GetFromJsonAsync<AutoDTO>($"/api/Auto/{reservation.AutoId}");
					}
					catch (Exception ex)
					{
						Console.WriteLine($"Error loading auto details for reservation {reservation.Id}: {ex.Message}");
					}
				}
			}
		}
		catch (Exception ex)
		{
			Message = $"Fout bij laden van reserveringen: {ex.Message}";
		}
	}

	private async Task CancelReservation(int reservationId)
	{
		try
		{
			var response = await Http.DeleteAsync($"/api/LeenAutoReservering/{reservationId}");
			if (response.IsSuccessStatusCode)
			{
				SuccessMessage = "Reservering succesvol geannuleerd!";
				await LoadUserReservations();

				_ = Task.Delay(5000).ContinueWith(_ =>
				{
					SuccessMessage = string.Empty;
					InvokeAsync(StateHasChanged);
				});
			}
			else
			{
				var errorContent = await response.Content.ReadAsStringAsync();
				Message = $"Fout bij annuleren van reservering: {errorContent}";
			}
		}
		catch (Exception ex)
		{
			Message = $"Fout bij annuleren van reservering: {ex.Message}";
		}
	}

	private async Task ShowCompleteModal(LeenAutoReserveringDTO reservation)
	{
		SelectedReservation = reservation;

		if (SelectedReservation.Auto == null && SelectedReservation.AutoId > 0)
		{
			try
			{
				SelectedReservation.Auto = await Http.GetFromJsonAsync<AutoDTO>($"/api/Auto/{SelectedReservation.AutoId}");
			}
			catch (Exception ex)
			{
				Message = $"Fout bij laden van auto gegevens: {ex.Message}";
				return;
			}
		}

		NewKilometerstand = SelectedReservation.Auto?.Kilometerstand ?? 0;
		KilometerstandError = string.Empty;
		ShowCompleteReservationModal = true;
	}

	private void CloseCompleteModal()
	{
		ShowCompleteReservationModal = false;
		SelectedReservation = null;
		NewKilometerstand = 0;
		KilometerstandError = string.Empty;
	}

	private async Task CompleteReservation()
	{
		if (SelectedReservation == null) return;

		if (SelectedReservation.Auto == null && SelectedReservation.AutoId > 0)
		{
			try
			{
				SelectedReservation.Auto = await Http.GetFromJsonAsync<AutoDTO>($"/api/Auto/{SelectedReservation.AutoId}");
			}
			catch (Exception ex)
			{
				Message = $"Fout bij laden van auto gegevens: {ex.Message}";
				return;
			}
		}

		if (SelectedReservation.Auto == null)
		{
			Message = "Kan auto gegevens niet laden.";
			return;
		}

		var currentKm = SelectedReservation.Auto.Kilometerstand;
		if (NewKilometerstand < currentKm)
		{
			KilometerstandError = $"Nieuwe kilometerstand moet minimaal {currentKm} km zijn";
			return;
		}

		if (NewKilometerstand == currentKm)
		{
			KilometerstandError = "Nieuwe kilometerstand moet hoger zijn dan de huidige kilometerstand";
			return;
		}

		try
		{
			var user = await AuthService.GetUserInfoAsync();
			if (!user.Success)
			{
				Message = "Kon gebruikersinformatie niet ophalen.";
				return;
			}

			var updateAutoRequest = new
			{
				Id = SelectedReservation.Auto.Id,
				Kenteken = SelectedReservation.Auto.Kenteken,
				Kilometerstand = NewKilometerstand,
				Naam = SelectedReservation.Auto.Naam
			};

			var autoResponse = await Http.PutAsJsonAsync($"/api/Auto/{SelectedReservation.Auto.Id}", updateAutoRequest);

			if (!autoResponse.IsSuccessStatusCode)
			{
				var errorContent = await autoResponse.Content.ReadAsStringAsync();
				Message = $"Fout bij bijwerken van kilometerstand: {errorContent}";
				return;
			}

			var updateReservationRequest = new
			{
				Id = SelectedReservation.Id,
				WerknemerId = SelectedReservation.WerknemerId,
				AutoId = SelectedReservation.AutoId,
				Auto = SelectedReservation.Auto,
				StartDatum = SelectedReservation.StartDatum,
				EindDatum = SelectedReservation.EindDatum,
				RitVoltooid = true,
				WerknemerEmail = user.Email ?? string.Empty,
				WerknemerUserName = user.Username ?? string.Empty
			};

			var reservationResponse = await Http.PutAsJsonAsync($"/api/LeenAutoReservering/{SelectedReservation.Id}", updateReservationRequest);

			if (reservationResponse.IsSuccessStatusCode)
			{
				SuccessMessage = $"Reservering voltooid! Kilometerstand bijgewerkt van {currentKm} km naar {NewKilometerstand} km.";
				CloseCompleteModal();
				await LoadUserReservations();

				_ = Task.Delay(5000).ContinueWith(_ =>
				{
					SuccessMessage = string.Empty;
					InvokeAsync(StateHasChanged);
				});
			}
			else
			{
				var errorContent = await reservationResponse.Content.ReadAsStringAsync();
				Message = $"Fout bij voltooien van reservering: {errorContent}";
			}
		}
		catch (Exception ex)
		{
			Message = $"Fout bij voltooien van reservering: {ex.Message}";
		}
	}

	private string GetDuration(DateTime start, DateTime end)
	{
		var duration = end - start;
		if (duration.TotalDays >= 1)
		{
			return $"{(int)duration.TotalDays}d {duration.Hours}u";
		}
		else if (duration.TotalHours >= 1)
		{
			return $"{(int)duration.TotalHours}u {duration.Minutes}m";
		}
		else
		{
			return $"{duration.Minutes}m";
		}
	}

	private void NavigateToReservation()
	{
		Nav.NavigateTo("/reservering");
	}
}