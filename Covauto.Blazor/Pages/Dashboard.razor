@page "/"
@using System.Text.Json
@inject NavigationManager Nav
@inject Covauto.Blazor.Services.AuthService AuthService

<ErrorBoundary>
	<ChildContent>
		<div class="min-h-screen bg-gray-100 p-8">
			<div class="max-w-3xl mx-auto bg-white rounded-lg shadow-lg p-6">
				<div class="flex justify-between items-center mb-6">
					<h2 class="text-2xl font-bold text-gray-800">Dashboard</h2>
					<button @onclick="LogoutAsync" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 focus:outline-none">
						Logout
					</button>
				</div>

				@if (IsLoading)
				{
					<div class="flex justify-center items-center p-4">
						<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
						<span class="ml-2">Loading...</span>
					</div>
				}
				else if (!string.IsNullOrEmpty(Username))
				{
					<div class="bg-green-50 p-4 rounded-lg border border-green-200 mb-6">
						<p class="text-gray-700">Welcome, <strong>@Username</strong>!</p>
					</div>

					<div class="mt-6">
						<h3 class="text-lg font-medium text-gray-800 mb-4">Your Account Information</h3>
						<div class="bg-gray-50 rounded-lg p-4">
							<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
								<div>
									<p class="text-sm text-gray-500">Username</p>
									<p class="font-medium">@Username</p>
								</div>
								<div>
									<p class="text-sm text-gray-500">Status</p>
									<p class="font-medium">Active</p>
								</div>
							</div>
						</div>
					</div>
				}
				else if (!string.IsNullOrEmpty(Message))
				{
					<div class="bg-red-50 p-4 rounded-lg border border-red-200">
						<p class="text-red-600">@Message</p>
					</div>
				}
			</div>
		</div>
	</ChildContent>
	<ErrorContent>
		@* Empty to suppress Blazor's default error UI *@
	</ErrorContent>
</ErrorBoundary>

@code {
	private string Username { get; set; } = string.Empty;
	private string Message { get; set; } = string.Empty;
	private bool IsLoading { get; set; } = true;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var result = await AuthService.GetUserInfoAsync();

			if (result.Success)
			{
				Username = result.Username ?? string.Empty;

				if (string.IsNullOrEmpty(Username))
				{
					Message = result.Message ?? "Unknown error";
				}
			}
			else
			{
				if ((result.Message?.Contains("401") ?? false) || (result.Message?.Contains("Unauthorized") ?? false))
				{
					Nav.NavigateTo("/login");
					return;
				}

				Message = result.Message ?? "Failed to get user info.";
			}
		}
		catch (Exception ex)
		{
			Message = $"An error occurred: {ex.Message}";
		}
		finally
		{
			IsLoading = false;
		}
	}

	private async Task LogoutAsync()
	{
		try
		{
			await AuthService.LogoutAsync();
			Nav.NavigateTo("/login", forceLoad: true);
		}
		catch
		{
			Nav.NavigateTo("/login", forceLoad: true);
		}
	}
}
